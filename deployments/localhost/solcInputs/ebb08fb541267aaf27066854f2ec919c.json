{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/NftMarketplace.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.7;\n\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n// listItem: List NFTs on the marketplace ✅\n// buyItem: Buy the NFTS✅\n// cancelItem: Cancel a listing✅\n// updateListing: Update Price✅\n// withdrawProceeds: Withdraw payment for my bought NFTs✅\n\nerror PriceMustBeAboveZero();\nerror NotApprovedForMarketplace();\nerror AlreadyListed(address nftAddress, uint256 tokenId);\nerror NotOwner();\nerror NotListed(address nftAddress, uint256 tokenId);\nerror AlreadyBuyed();\nerror PriceNotMet(address nftAddress, uint256 tokenId, uint256 price);\nerror NoProceeds();\n\ncontract NftMarketplace {\n    struct Listing {\n        uint256 price;\n        address seller;\n    }\n\n    event TestEvent(\n        uint256 indexed favNumber,\n        uint256 indexed balance,\n        address sender\n    );\n\n    event ItemListed(\n        address indexed seller,\n        address indexed nftAddress,\n        uint256 indexed tokenId,\n        uint256 price\n    );\n    event ItemBought(\n        address indexed buyer,\n        address indexed nftAddress,\n        uint256 indexed tokenId,\n        uint256 price\n    );\n    event ItemDeleted(\n        address indexed owner,\n        address indexed nftAddress,\n        uint256 indexed tokenId\n    );\n\n    mapping(address => mapping(uint256 => Listing)) private s_listings;\n    mapping(address => uint256) private s_sellerToBalance;\n\n    modifier notListed(address nftAddress, uint256 tokenId) {\n        Listing memory item = s_listings[nftAddress][tokenId];\n        if (item.price > 0) {\n            revert AlreadyListed(nftAddress, tokenId);\n        }\n        _;\n    }\n\n    modifier isOwner(\n        address nftAddress,\n        uint256 tokenId,\n        address sender\n    ) {\n        IERC721 nft = IERC721(nftAddress);\n        if (nft.ownerOf(tokenId) != sender) {\n            revert NotOwner();\n        }\n        _;\n    }\n    modifier notOwner(\n        address nftAddress,\n        uint256 tokenId,\n        address sender\n    ) {\n        IERC721 nft = IERC721(nftAddress);\n        if (nft.ownerOf(tokenId) == sender) {\n            revert AlreadyBuyed();\n        }\n        _;\n    }\n\n    modifier isListed(address nftAddress, uint256 tokenId) {\n        Listing memory item = s_listings[nftAddress][tokenId];\n\n        if (item.price <= 0) revert NotListed(nftAddress, tokenId);\n        _;\n    }\n\n    function listItem(\n        address nftAddress,\n        uint256 tokenId,\n        uint256 price\n    )\n        external\n        notListed(nftAddress, tokenId)\n        isOwner(nftAddress, tokenId, msg.sender)\n    {\n        if (price <= 0) revert PriceMustBeAboveZero();\n\n        IERC721 nft = IERC721(nftAddress);\n        if (nft.getApproved(tokenId) != address(this)) {\n            revert NotApprovedForMarketplace();\n        }\n\n        s_listings[nftAddress][tokenId] = Listing(price, msg.sender);\n        emit ItemListed(msg.sender, nftAddress, tokenId, price);\n    }\n\n    function buyItem(\n        address nftAddress,\n        uint256 tokenId\n    )\n        external\n        payable\n        // nonReentrant\n        isListed(nftAddress, tokenId)\n        notOwner(nftAddress, tokenId, msg.sender)\n    {\n        Listing memory item = s_listings[nftAddress][tokenId];\n\n        if (msg.value < item.price) {\n            revert PriceNotMet(nftAddress, tokenId, item.price);\n        }\n\n        s_sellerToBalance[item.seller] += msg.value;\n        delete (s_listings[nftAddress][tokenId]);\n\n        IERC721(nftAddress).safeTransferFrom(item.seller, msg.sender, tokenId);\n\n        emit ItemBought(msg.sender, nftAddress, tokenId, msg.value);\n    }\n\n    function cancelListing(\n        address nftAddress,\n        uint256 tokenId\n    )\n        external\n        isListed(nftAddress, tokenId)\n        isOwner(nftAddress, tokenId, msg.sender)\n    {\n        delete (s_listings[nftAddress][tokenId]);\n        emit ItemDeleted(msg.sender, nftAddress, tokenId);\n    }\n\n    function updateListing(\n        address nftAddress,\n        uint256 tokenId,\n        uint256 newPrice\n    )\n        external\n        isListed(nftAddress, tokenId)\n        isOwner(nftAddress, tokenId, msg.sender)\n    {\n        if (newPrice <= 0) {\n            revert PriceMustBeAboveZero();\n        }\n\n        s_listings[nftAddress][tokenId].price = newPrice;\n\n        emit ItemListed(msg.sender, nftAddress, tokenId, newPrice);\n    }\n\n    function withdrawProceeds() external {\n        uint256 amount = s_sellerToBalance[msg.sender];\n\n        if (amount <= 0) {\n            revert NoProceeds();\n        }\n        s_sellerToBalance[msg.sender] = 0;\n\n        (bool success, ) = payable(msg.sender).call{value: amount}(\"\");\n        require(success, \"Transfer failed\");\n    }\n\n    // getter function\n\n    function getListing(\n        address nftAddress,\n        uint256 tokenId\n    ) external view returns (Listing memory) {\n        return s_listings[nftAddress][tokenId];\n    }\n\n    function getBalance() external returns (uint256) {\n        emit TestEvent(26, s_sellerToBalance[msg.sender], msg.sender);\n        return s_sellerToBalance[msg.sender];\n    }\n}\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}